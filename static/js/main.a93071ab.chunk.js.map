{"version":3,"sources":["consolePanel/Output.js","Allbuttons/Button/Button.js","Allbuttons/Allbuttons.js","index.js"],"names":["Output","props","react_default","a","createElement","style","backgroundColor","border","textAlign","fontSize","color","padding","margin","type","showVal","Button","span","operator","button_style","isNaN","parseInt","includes","width","height","outlineColor","div_style","gridColumn","onClick","clickHandler","value","Allbuttons","x","_this","calculate","_this2","this","className","map","e","index","Allbuttons_Button_Button","key","Component","initialState","outputValue","currentValue","calculateValue","currentOperator","operators","App","state","handleCalculate","val2","val1","ops","console","log","handleClick","setState","concat","tempValue","Number","parseFloat","consolePanel_Output","src_Allbuttons_Allbuttons","render","src_App","document","getElementById"],"mappings":"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","file":"static/js/main.a93071ab.chunk.js","sourcesContent":["import React, { Component } from 'react';\n\nconst Output = (props)=> {\n    const input={\n        \"backgroundColor\":'#222',\n        \"border\":\"1px solid black\",\n        \"textAlign\":\"right\",\n        \"fontSize\":\"3em\",\n        \"color\":\"white\",\n        \"padding\":\"10px\",\n        \"margin\":\"0px\",\n    }\n\n    return (\n        <h1 style={input} type=\"number\">{props.showVal}</h1>\n    );\n}\n\nexport default Output;\n\n","import React, { Component } from 'react';\r\n\r\nconst Button = (props)=> {\r\n  const span = props.operator==0? \"1/3\" : null\r\n  \r\n\r\n  const operatorSymbols = \"+-x÷=\"\r\n\r\n  const bgColor = !isNaN(parseInt(props.operator, 10))||props.operator=='.'?\"#333333\":operatorSymbols.includes(props.operator)?\"#f5923e\":\"#a6a6a6\"\r\n  const button_style={\r\n      \"backgroundColor\":bgColor,\r\n      \"color\":\"white\",\r\n      \"width\":\"100%\",\r\n      \"height\":\"100%\",\r\n      \"outlineColor\":\"gray\",\r\n    }\r\n  const div_style={\r\n    \"gridColumn\":span\r\n  }\r\n\r\n  const handleClick = () => {\r\n    props.clickHandler(props.operator)\r\n  }\r\n\r\n    return (\r\n      <div style={div_style}>\r\n        <button onClick={handleClick} style={button_style} value={props.operator} type=\"text\">{props.operator}</button>\r\n      </div>\r\n    );\r\n}\r\n\r\nexport default Button;\r\n\r\n","import React, { Component } from 'react';\r\nimport Button from './Button/Button'\r\nimport './Allbuttons.css'\r\n\r\nclass Allbuttons extends Component {\r\n  clickHandler = (x) =>{\r\n      this.props.calculate(x);\r\n    }\r\n  render() {    \r\n    const operators = [\"C\",\"+/-\",\"%\",\"÷\",\"7\",\"8\",\"9\",\"x\",\"4\",\"5\",\"6\",\"-\",\"1\",\"2\",\"3\",\"+\",\"0\",\".\",\"=\"]\r\n\r\n    return (\r\n      <div className=\"buttonContainer\">\r\n        {operators.map((e,index)=>{\r\n          return <Button key={index} clickHandler={this.clickHandler} operator={e} />\r\n        })}\r\n        \r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Allbuttons;\r\n","import React, { Component } from 'react';\nimport { render } from 'react-dom';\nimport Output from './consolePanel/Output';\nimport Allbuttons from './Allbuttons/Allbuttons';\nimport './container.css';\n\n    const initialState = {\n            outputValue:0,\n            currentValue:0,\n            calculateValue:0,\n            currentOperator:\"\",\n        }\n    const operators = \"+-x÷\"\n    class App extends Component {\n        state = initialState\n        handleCalculate = (val2,val1,ops) => {\n            console.log(ops)\n            console.log(typeof(ops))\n            return ops==\"x\"?val1*val2:ops==\"÷\"?val1/val2:ops==\"+\"?val1+val2:val1-val2\n        }\n        handleClick = (x) => {\n           if(!isNaN(x)||x==\".\")\n           {\n               this.setState({\n                   outputValue:this.state.outputValue==0?`${x}`:`${this.state.outputValue.concat(x)}`,\n                   currentValue:this.state.outputValue==0?`${x}`:`${this.state.outputValue.concat(x)}`,\n               })\n           }\n           if(operators.includes(x))\n           {\n               if(this.state.currentValue!=0&&this.state.calculateValue!=0)\n               {\n                   const tempValue = new Number(this.state.outputValue)\n                   this.setState({\n                       currentValue:tempValue,\n                       outputValue: 0,\n                       currentOperator:x,\n                   })\n               }\n               else\n               {\n                   this.setState({\n                           calculateValue:new Number(this.state.currentValue),\n                            outputValue:0,\n                            currentOperator:x,\n                       }\n                   )\n               }\n           }\n           if(x==\"=\")\n           {\n               if(this.state.currentValue!=0&&this.state.calculateValue!=0)\n               {\n                   this.setState({\n                       calculateValue:this.handleCalculate(parseFloat(this.state.currentValue), parseFloat(this.state.calculateValue), this.state.currentOperator),\n                       outputValue: this.handleCalculate(parseFloat(this.state.currentValue), parseFloat(this.state.calculateValue), this.state.currentOperator),\n                   })\n               }\n\n           }\n           if(x==\"+/-\")\n           {\n               this.setState({\n                   calculateValue:this.state.outputValue*-1,\n                   outputValue: this.state.outputValue*-1,\n               })\n           }\n           if(x==\"C\")\n            {\n                this.setState(initialState)\n            }\n            if(x==\"%\")\n            {\n                this.setState({\n                    calculateValue:this.state.outputValue/100,\n                    outputValue: this.state.outputValue/100,\n                })\n            }\n      }\n\n\n      render() {\n        return (\n          <div className=\"html_container\">\n            <h1>Calvin's First React App</h1>\n            <div className=\"container\">\n              <Output showVal={this.state.outputValue}/>\n              <Allbuttons calculate={this.handleClick}/>\n            </div>\n          </div>\n        );\n      }\n    }\n\nrender(<App />, document.getElementById('root'));\n"],"sourceRoot":""}